import telebot
from telebot import types
from django.conf import settings
from core.models import BotUser, \
    BotTicket

TOKEN = settings.TELEGRAM_BOT_TOKEN
bot = telebot.TeleBot(TOKEN)

OPERATOR_CHAT_ID = settings.TELEGRAM_CHAT_ID


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if message.chat.type == "private":
        btn_location = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
                                            request_location=True)
        markup.add(btn_location)

    btn_support = types.KeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    btn_event = types.KeyboardButton("üóìÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    markup.add(btn_support, btn_event)

    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.",
                     reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
@bot.message_handler(func=lambda message: message.text == "üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
def support_request(message):
    user_id = message.from_user.id

    # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
    bot_user, created = BotUser.objects.get_or_create(tg_id=user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    open_ticket = BotTicket.objects.filter(bot_user=bot_user,
                                           mark__isnull=True).first()

    if open_ticket:
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç
        new_ticket = BotTicket.objects.create(bot_user=bot_user)
        bot.send_message(message.chat.id,
                         "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
@bot.message_handler(func=lambda message: BotTicket.objects.filter(
    bot_user__tg_id=message.from_user.id, mark__isnull=True).exists())
def receive_support_message(message):
    user_id = message.from_user.id
    bot_user = BotUser.objects.get(tg_id=user_id)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç
    open_ticket = BotTicket.objects.filter(bot_user=bot_user,
                                           mark__isnull=True).first()

    if open_ticket:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        open_ticket.problem = message.text
        open_ticket.save()
        bot.send_message(message.chat.id,
                         "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = (f"ID: `{user_id}`\n"
                     f"–ù–∏–∫–Ω–µ–π–º: @{message.from_user.username}\n"
                     f"–ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞: #{open_ticket.id}")
        bot.send_message(OPERATOR_CHAT_ID, user_info)

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        bot.forward_message(OPERATOR_CHAT_ID, message.chat.id,
                            message.message_id)


# –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /reply user_id —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['reply'])
def reply_to_user(message):
    try:
        args = message.text.split(maxsplit=2)
        user_id = int(args[1])
        response = args[2]

        bot_user = BotUser.objects.get(tg_id=user_id)
        open_ticket = BotTicket.objects.filter(bot_user=bot_user,
                                               mark__isnull=True).first()

        if open_ticket:
            bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {response}")
            bot.send_message(message.chat.id,
                             f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        else:
            bot.send_message(message.chat.id,
                             "–¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


# –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /close user_id
@bot.message_handler(commands=['close'])
def close_ticket(message):
    try:
        args = message.text.split(maxsplit=1)
        user_id = int(args[1])

        bot_user = BotUser.objects.get(tg_id=user_id)
        open_ticket = BotTicket.objects.filter(bot_user=bot_user,
                                               mark__isnull=True).first()

        if open_ticket:
            open_ticket.mark = 0  # –û–±–æ–∑–Ω–∞—á–∞–µ–º —Ç–∏–∫–µ—Ç –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—ã–π –±–µ–∑ –æ—Ü–µ–Ω–∫–∏
            open_ticket.save()

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            markup = types.InlineKeyboardMarkup()
            for i in range(1, 6):
                markup.add(types.InlineKeyboardButton(str(i),
                                                      callback_data=f"rate_{user_id}_{i}"))

            bot.send_message(user_id,
                             "–í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç 1 –¥–æ 5.",
                             reply_markup=markup)
            bot.send_message(message.chat.id,
                             f"–¢–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–∫—Ä—ã—Ç.")
        else:
            bot.send_message(message.chat.id,
                             "–¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (—á–µ—Ä–µ–∑ callback_data)
@bot.callback_query_handler(func=lambda call: call.data.startswith('rate_'))
def handle_rating(call):
    try:
        data = call.data.split('_')
        user_id = int(data[1])
        rating = int(data[2])

        bot_user = BotUser.objects.get(tg_id=user_id)
        closed_ticket = BotTicket.objects.filter(bot_user=bot_user,
                                                 mark=0).first()

        if closed_ticket:
            closed_ticket.mark = rating
            closed_ticket.save()
            bot.send_message(call.message.chat.id,
                             f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {rating}!")
        else:
            bot.send_message(call.message.chat.id,
                             "–¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

    bot.answer_callback_query(call.id)
